{
	"levels" :[
		{
			"id": 0,
			"name": "Level 1: Not",
			"description": "Create the Not Gate that return the opposite of the input using the provided NAnd gate.\nYou can see the truth tables for Not and NAnd gates",
			"table": "res://UI/Tables/nandnottable.png",
			"tableScale": {"x": 0.2, "y": 0.2},
			"minScore": 1,
			"input":{
				"amount": 1,
				"labels": ["in"],
				"tests":[
					[true],
					[false]
				]
			},
			"output":{
				"amount": 1,
				"labels": ["out"],
				"results":[
					[false],
					[true]
				]
			},
			"nodeAvailable": [true]
		}, {
			"id": 1,
			"name": "Level 2: And",
			"description": "Create the And gate that only return true when both inputs are true using the Not and NAnd gate.",
			"table": "res://UI/Tables/andtable.png",
			"tableScale": {"x": 0.2, "y": 0.2},
			"minScore": 2,
			"input":{
				"amount": 2,
				"labels": ["A", "B"],
				"tests":[
					[true, true],
					[false, true],
					[true, false],
					[false, false]
				]
			},
			"output":{
				"amount": 1,
				"labels": ["out"],
				"results":[
					[true],
					[false],
					[false],
					[false]
				]
			},
			"nodeAvailable": [true, true]
		}, {
			"id": 2,
			"name": "Level 3: Or",
			"description": "Create the Or gate that return true when either inputs are true using the gates you previously made",
			"table": "res://UI/Tables/ortable.png",
			"tableScale": {"x": 0.2, "y": 0.2},
			"minScore": 3,
			"input":{
				"amount": 2,
				"labels": ["A", "B"],
				"tests":[
					[true, true],
					[false, true],
					[true, false],
					[false, false]
				]
			},
			"output":{
				"amount": 1,
				"labels": ["out"],
				"results":[
					[true],
					[true],
					[true],
					[false]
				]
			},
			"nodeAvailable": [true, true, true]
		}, {
			"id": 3,
			"name": "Level 4: NOr",
			"description": "Create the NOr that return the opposite of the Or gate",
			"table": "res://UI/Tables/nortable.png",
			"tableScale": {"x": 0.2, "y": 0.2},
			"minScore": 4,
			"input":{
				"amount": 2,
				"labels": ["A", "B"],
				"tests":[
					[true, true],
					[false, true],
					[true, false],
					[false, false]
				]
			},
			"output":{
				"amount": 1,
				"labels": ["out"],
				"results":[
					[false],
					[false],
					[false],
					[true]
				]
			},
			"nodeAvailable": [true, true, true, true]
		}, {
			"id": 4,
			"name": "Level 5: XOr",
			"description": "Create the XOr gate that return true when only one input is but not both",
			"table": "res://UI/Tables/xortable.png",
			"tableScale": {"x": 0.2, "y": 0.2},
			"minScore": 4,
			"input":{
				"amount": 2,
				"labels": ["A", "B"],
				"tests":[
					[true, true],
					[false, true],
					[true, false],
					[false, false]
				]
			},
			"output":{
				"amount": 1,
				"labels": ["out"],
				"results":[
					[false],
					[true],
					[true],
					[false]
				]
			},
			"nodeAvailable": [true, true, true, true, true]
		}, {
			"id": 5,
			"name": "Level 6: XNOr",
			"description": "Create the XNOr that return the opposite of the XOr gate",
			"table": "res://UI/Tables/xnortable.png",
			"tableScale": {"x": 0.2, "y": 0.2},
			"minScore": 5,
			"input":{
				"amount": 2,
				"labels": ["A", "B"],
				"tests":[
					[true, true],
					[false, true],
					[true, false],
					[false, false]
				]
			},
			"output":{
				"amount": 1,
				"labels": ["out"],
				"results":[
					[true],
					[false],
					[false],
					[true]
				]
			},
			"nodeAvailable": [true, true, true, true, true, true]
		}, {
			"id": 6,
			"name": "Level 7: Mux",
			"description": "Create the Multiplexor that return A when the selector(sel) is true but B otherwise",
			"table": "res://UI/Tables/muxtable.png",
			"tableScale": {"x": 0.2, "y": 0.2},
			"minScore": 8,
			"input":{
				"amount": 3,
				"labels": ["A", "B", "Sel"],
				"tests":[
					[true, false, true],
					[true, false, false],
					[false, true, true],
					[false, true, false]
				]
			},
			"output":{
				"amount": 1,
				"labels": ["out"],
				"results":[
					[true],
					[false],
					[false],
					[true]
				]
			},
			"nodeAvailable": [true, true, true, true, true, true, true]
		}, {
			"id": 7,
			"name": "Level 8: DMux",
			"description": "Create Demultiplexor that return the input in A when the selector is true but in B otherwise",
			"table": "res://UI/Tables/dmuxtable.png",
			"tableScale": {"x": 0.2, "y": 0.2},
			"minScore": 8,
			"input":{
				"amount": 2,
				"labels": ["in", "Sel"],
				"tests":[
					[true, true],
					[true, false],
					[false, true],
					[false, false]
				]
			},
			"output":{
				"amount": 2,
				"labels": ["A", "B"],
				"results":[
					[true, false],
					[false, true],
					[false, false],
					[false, false]
				]
			},
			"nodeAvailable": [true, true, true, true, true, true, true]
		}
	]
}
