[gd_scene load_steps=2 format=3 uid="uid://c7n04muwj7mk2"]

[sub_resource type="GDScript" id="GDScript_3loqo"]
script/source = "extends ColorRect
class_name Plug

var isPluged : bool = false
var value : bool = false
var isInput : bool

var node : BaseNode

var linkExist : bool = false
var linked : Plug = null
var linkPos : Vector2



func getMiddle(vector : Vector2, size : Vector2) -> Vector2:
	return Vector2(vector.x + (size.x / 2), vector.y + (size.y / 2))

func init(isOutput, parentNode, i):
	isInput = not isOutput
	node = parentNode
	linkPos = getMiddle(position, size * scale)
	index = 

func _ready():
	pass

func _draw():
	if linkExist:
		draw_line(getMiddle(position, size * scale), linkPos, Color.AQUA, 10)

func _process(delta):
	pass

func _on_gui_input(event):
	if event is InputEventScreenDrag:
		if not linkExist:
			linkExist = true
			linkPos = position
		linkPos += event.relative
		queue_redraw()

func _get_drag_data(_pos):
	var data = {
		\"origin\" = self
	}

	return data

func _can_drop_data(_pos, data):
	if  data.origin.node == node or data.origin.isInput == isInput:
		return false
	return true

func _drop_data(_pos, data):
	
	color = Color.RED
	isPluged = true
	linked = data.origin
	
	data.origin.color = Color.RED
	data.origin.isPluged = true
	data.origin.linked = self
	if linkExist:
		pass
"

[node name="Plug" type="ColorRect"]
custom_minimum_size = Vector2(20, 20)
size_flags_horizontal = 4
script = SubResource("GDScript_3loqo")

[connection signal="gui_input" from="." to="." method="_on_gui_input"]
